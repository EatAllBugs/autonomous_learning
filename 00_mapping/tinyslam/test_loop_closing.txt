#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "CoreSLAM.h"
#include "opencv2/opencv.hpp"

#define TEST_FILENAME "test_data/test_lab2"

#define TEST_MAX_SCANS 5000
#define TEST_SCAN_SIZE 682

void ts_map_empty(ts_map_t *map)
{
	int x, y;
	ts_map_pixel_t *ptr;
	for (ptr = map->map, y = 0; y < TS_MAP_SIZE; y++) {
		for (x = 0; x < TS_MAP_SIZE; x++, ptr++) {
			*ptr = 65535;
		}
	}
}

ts_sensor_data_t sensor_data[TEST_MAX_SCANS];

int ts_read_scans(char *filename, ts_sensor_data_t *sensor_data)
{
	FILE *input;
	char *str, line[4000];
	int i, nbscans = 0;
	ts_sensor_data_t *sd;

	input = fopen(filename, "rt");
	do {
		sd = &sensor_data[nbscans];
		// Read the scan
		str = fgets(line, 4000, input);
		if (str == NULL) break;
		str = strtok(str, " ");
		sscanf(str, "%u", &sd->timestamp);
		str = strtok(NULL, " ");
		str = strtok(NULL, " ");
		sscanf(str, "%d", &sd->q1);
		str = strtok(NULL, " ");
		sscanf(str, "%d", &sd->q2);
		for (i = 0; i < 21; i++)
			str = strtok(NULL, " ");
		for (i = 0; i < TEST_SCAN_SIZE; i++)
		{
			if (str)
			{
				sscanf(str, "%d", &sd->d[i]);
				str = strtok(NULL, " ");
			}
			else sd->d[i] = 0;
		}
		nbscans++;
	} while (1);
	fclose(input);
	return nbscans;
}

ts_map_t trajectory, map, loop_map, map_scans;

void draw_map(ts_map_t *map, ts_map_t *overlay, int width, int height)
{
	int x = 0, y = 0, xp, yp;
	cv::Mat image(height, width, CV_8UC3);
	for (yp = 0; yp < height; y++, yp++) {
		for (xp = 0; xp < width; x++, xp++) {
			unsigned char *p = image.data + yp*width * 3 + xp * 3;
			if (overlay->map[yp * TS_MAP_SIZE + xp] == 0) {
				p[0] = 0; p[1] = 0; p[2] = 0;
			}
			else if (overlay->map[yp * TS_MAP_SIZE + xp] == 254) {
				p[0] = 0; p[1] = 0; p[2] = 255;
			}
			else {
				//p[0] = 255; p[1] = 0; p[2] = ;
				p[0] = (map->map[yp * TS_MAP_SIZE + xp]) >> 8;
				p[1] = (map->map[yp * TS_MAP_SIZE + xp]) >> 8;
				p[2] = (map->map[yp * TS_MAP_SIZE + xp]) >> 8;
			}
		}
	}
	cv::imshow("1", image);
	cv::waitKey(10);
}

int main(int argc, char *argv[])
{
	ts_position_t startpos, loop_startpos, loop_endpos, position;
	char filename[256], test_filename[256];
	int i, x, y;
	int quality;
	int nbscans, maxscans;
	ts_robot_parameters_t params;
	ts_laser_parameters_t laser_params;
	ts_state_t state;
	int loop, loop_start, nb_loops, loop_end[2];

	cv::namedWindow("1", cv::WINDOW_NORMAL);

	if (argc < 2)
		strcpy(test_filename, TEST_FILENAME);
	else
		strcpy(test_filename, argv[1]);

	// Read the scans from data file
	sprintf(filename, "%s.dat", test_filename);
	printf("Loading data from file %s...\n", test_filename);
	maxscans = ts_read_scans(filename, sensor_data);

	if (argc == 3) {
		nb_loops = 2;
		loop_end[0] = atoi(argv[2]);
	}
	else
		nb_loops = 1;
	loop_end[nb_loops - 1] = maxscans;

	params.r = 0.077;
	params.R = 0.165;
	params.inc = 2000;
	params.ratio = 1.0;

	laser_params.offset = 145;
	laser_params.scan_size = TEST_SCAN_SIZE;
	laser_params.angle_min = -120;
	laser_params.angle_max = +120;
	laser_params.detection_margin = 70;
	laser_params.distance_no_detection = 4000;

	startpos.x = 0.5 * TS_MAP_SIZE / TS_MAP_SCALE;
	startpos.y = 0.6 * TS_MAP_SIZE / TS_MAP_SCALE;
	startpos.theta = 0;

	ts_map_init(&map);
	ts_map_init(&trajectory);
	ts_map_init(&loop_map);

	loop_start = 0;
	loop_startpos = startpos;
	for (loop = 0; loop != nb_loops; loop++)
	{
		ts_state_init(&state, &map, &params, &laser_params, &loop_startpos, 100, 20, 600, TS_DIRECTION_FORWARD);
		for (nbscans = loop_start; nbscans != loop_end[loop]; nbscans++)
		{
			ts_iterative_map_building(&sensor_data[nbscans], &state);

			printf("#%d : %lg %lg %lg\n", nbscans, state.position.x, state.position.y, state.position.theta);

			if (nbscans == 50) { loop_map = map; }

			x = (int)floor(state.position.x * TS_MAP_SCALE + 0.5);
			y = ((int)floor(state.position.y * TS_MAP_SCALE + 0.5));
			if (x >= 0 && y >= 0 && x < TS_MAP_SIZE && y < TS_MAP_SIZE)
			{
				trajectory.map[y * TS_MAP_SIZE + x] = 0;
			}
		}
		printf("Forward distance: %lg\n", state.distance);
		printf("Starting point : %lg %lg %lg\n", startpos.x, startpos.y, startpos.theta);
		printf("End point : %lg %lg %lg\n", state.position.x, state.position.y, state.position.theta);

		printf("Try to close the loop...\n");

		position = state.position;
		position.x += state.laser_params.offset * cos(position.theta * M_PI / 180);
		position.y += state.laser_params.offset * sin(position.theta * M_PI / 180);
		loop_endpos = ts_close_loop_position(&state, &sensor_data[loop_end[loop] - 1], &loop_map, &position, &quality);
		loop_endpos.x -= state.laser_params.offset * cos(loop_endpos.theta * M_PI / 180);
		loop_endpos.y -= state.laser_params.offset * sin(loop_endpos.theta * M_PI / 180);

		printf("Loop close point : %lg %lg %lg (%d)\n", loop_endpos.x, loop_endpos.y, loop_endpos.theta, quality);
		/*printf("Deviation is : %lg mm, %lg degrees\n", ts_distance(&state.position, &loop_endpos), fabs(state.position.theta - loop_endpos.theta));*/

		map = loop_map;
		ts_map_init(&trajectory);

		ts_state_init(&state, &map, &params, &laser_params, &loop_endpos, 100, 20, 600, TS_DIRECTION_BACKWARD);
		for (nbscans = loop_end[loop] - 1; nbscans >= loop_start; nbscans--)
		{
			ts_iterative_map_building(&sensor_data[nbscans], &state);

			printf("#%d : %lg %lg %lg\n", nbscans, state.position.x, state.position.y, state.position.theta);

			x = (int)floor(state.position.x * TS_MAP_SCALE + 0.5);
			y = ((int)floor(state.position.y * TS_MAP_SCALE + 0.5));
			if (x >= 0 && y >= 0 && x < TS_MAP_SIZE && y < TS_MAP_SIZE)
				trajectory.map[y * TS_MAP_SIZE + x] = 254;

			draw_map(&map, &trajectory, 2048, 2048);

		}
		printf("Backward distance: %lg\n", state.distance);
		//printf("Deviation is : %lg mm, %lg degrees\n", ts_distance(&state.position, &startpos), fabs(state.position.theta - startpos.theta));

		printf("Closing the loop...\n");
		ts_close_loop_trajectory(&sensor_data[loop_start], loop_end[loop] - loop_start, &loop_startpos, &loop_endpos);
		draw_map(&map, &trajectory, 2048, 2048);

		loop_map = map;
		/*sprintf(filename, "%s_loop%d_final.pgm", test_filename, loop);
		ts_save_map_pgm(&map, &trajectory, filename, TS_MAP_SIZE, TS_MAP_SIZE);
		sprintf(filename, "%s_loop%d_scans.pgm", test_filename, loop);
		ts_save_map_pgm(&map_scans, &trajectory, filename, TS_MAP_SIZE, TS_MAP_SIZE);*/

		loop_startpos = loop_endpos;
		loop_start = loop_end[loop];
	}

	state.done = 1;
	printf("Done\n");
	cv::waitKey(0);

	return 0;
}
